package dk.itu.mario.level;

public class JumpBuildingTool extends Tool {

	public int build(int start, int length, int floor, MyLevel level) {
		level.gaps++;
    	//jl: jump length
    	//js: the number of blocks that are available at either side for free
    	int end = (start + length);
        int jumpLength = level.random.nextInt(99)%3 + 2;
        int jumpStart = start + level.random.nextInt(length-jumpLength);

        int startHole = jumpStart;
		int endHole = jumpStart + jumpLength;
		System.out.println(start+","+end);
		System.out.println("hole: "+startHole+","+endHole);
		
		boolean hasStairs = level.random.nextInt(3) == 0;
        int maxStairHeight = Math.min(start - startHole, endHole - end);
    	int stairHeight = (level.random.nextInt(3) + 1) % maxStairHeight;
    	
        hasStairs = true;
    	stairHeight = 3;
        int stairLeftBegin	= startHole - stairHeight;
        int stairRightEnd	= endHole + stairHeight;
		
      //run from the start x position, for the whole length
        System.out.println("AE");
        for (int x = start; x < start+length; x++)
        {
			if ( x < startHole || x > endHole)
            {
				System.out.println(x);
                for (int y = level.height; y >= floor - stairHeight; y--)
                {	//paint ground up until the floor
                    if (y >= floor) level.setBlock(x, y, Level.GROUND);
                    
                  //if it is above ground, start making stairs of rocks
                    else if (hasStairs)
                    {	//LEFT SIDE
//                        if (((h - (rs + jl))/2 < x && x < (h - jl)/2))
//                    	System.out.println( ((x-start) - (endHole - (stairHeight+jl))/2)+","+stairHeight);
                    	if((x < startHole ) && (x > stairLeftBegin)) {
                    		if(( Math.abs(x - stairLeftBegin) >= Math.abs(y - floor) )) level.setBlock(x, y, Level.ROCK);
                    	}
                    	else if((startHole < x) && (x > stairLeftBegin)) {
                    		if((Math.abs(x - endHole) + Math.abs(y - floor) ) <= stairHeight) level.setBlock(x, y, Level.ROCK);
                    	}
//                    	if ((startHole > x ) && stairHeight - (startHole - x)  > 0)
//                        { //we need to max it out and level because it wont stairHeight - 
//                          //paint ground correctly unless two bricks are side by side  x - (h - jl)/2 <= stairHeight
//                    		System.out.println((floor- y));
//                    		if (stairHeight - (floor- y) > 0) level.setBlock(x, y, Level.ROCK);
//                        }
//                        else if((endHole < x) && stairHeight - (x - endHole) +1 > 0)
//                        { //RIGHT SIDE
////                    		System.out.println(stairHeight - (x - endHole) +1);
//                        	level.setBlock(x, y, Level.ROCK);
//                        }
                    }
                }
            }
        }

        return length;
	}

}
