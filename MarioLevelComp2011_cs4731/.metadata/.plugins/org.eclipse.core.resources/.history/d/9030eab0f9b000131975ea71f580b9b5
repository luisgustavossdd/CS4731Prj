package optimization;

import java.util.ArrayList;
import java.util.List;

public class GeneticAlgorithm<T> extends OptimizationAlgorithm<T> {

	private GeneticAlgorithmProblem<T> gap;
	
	private int populationSize;
	private int populationToMate;
	private int populationToMutate;
	
	private List<Individual<T>> population;
	
	double[] probabilities;
	
	public GeneticAlgorithm(int size, double replacementRate, double mutationRate, OptimizationProblem<T> optimizationProblem) {
		gap	= (GeneticAlgorithmProblem<T>) optimizationProblem;
		populationSize		= size;
		populationToMate 	= (int) Math.round(replacementRate * populationSize);
		populationToMutate	= (int) Math.round(mutationRate * populationSize);
		
		population = new ArrayList<Individual<T>>();
		for(int i = 0; i < populationSize; i++) {
			population.add(gap.createRandom());
		}
		
		probabilities;
	}

	public Individual<T> getOptimal() {
		 
		double bestFitness	= Double.MIN_VALUE;
		Individual<T> best	= null;
		
		for(Individual<T> individual : population) {
			double fitness = gap.value(individual);
			if(fitness > bestFitness){
				best = individual;
				bestFitness = fitness;
			}
		}
		return best;
	}

	public double train() {
		List<Individual<T>> offspring = generateOffspring();
		mutate();
		selectPopulation(offspring);
		return 0;
	}

	private void selectPopulation(List<Individual<T>> offspring) {
		List<Individual<T>> newPopulation = new ArrayList<Individual<T>>();
		newPopulation.addAll(offspring);
		
		newPopulation.addAll(Distribution.sample(population,probabilities,(population.size() - offspring.size())));

		population.clear();
		for(Individual<T> individual : newPopulation) 
			population.add(individual);
	}

	private double[] getProbabilities() {
		double[] result = new double[populationSize];
		for(int i = 0; i < populationSize; i++)
			result[i] = gap.value(population.get(i));
		return result;
	}

	private void mutate() {
		// TODO Auto-generated method stub
		
	}

	private List<Individual<T>> generateOffspring() {
		List<Individual<T>> offspring = new ArrayList<Individual<T>>();
		for(int i = 0; i < populationToMate; i++) 
			offspring.add(gap.mate(Distribution.sample(population, probabilities, 2)));
		return offspring;
	}

}
